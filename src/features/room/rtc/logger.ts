/**
 * Syst√®me de logs centralis√© pour WebRTC
 * 
 * üéØ CONFIGURATION : Changez LOG_LEVEL ici pour tout le projet
 * 
 * Niveaux de logs :
 * - MINIMAL : Grandes √©tapes seulement (connexion, d√©connexion, nb personnes)
 * - NORMAL : On sait ce qui se passe (ICE candidates, SDP, arriv√©es/d√©parts)  
 * - VERBOSE : Debug complet (tous les d√©tails techniques)
 */

// Types de logs
export enum LogLevel {
    MINIMAL = 0,  // Grandes √©tapes seulement
    NORMAL = 1,   // On sait ce qui se passe  
    VERBOSE = 2   // Debug complet
}

export enum LogCategory {
    CONNECTION = 'Connection',
    NEGOTIATION = 'Negotiation',
    SIGNALING = 'Signaling',
    ICE = 'ICE',
    DATACHANNEL = 'DataChannel',
    ROLE = 'Role',
    ERROR = 'Error'
}

// üéØ CONFIGURATION GLOBALE - Changez ici pour tout le projet
const LOG_LEVEL: LogLevel = LogLevel.MINIMAL; // ‚Üê Changez ici : MINIMAL, NORMAL, ou VERBOSE

// Configuration centralis√©e
class WebRTCLogger {
    private currentLevel: LogLevel;
    private enabledCategories: Set<LogCategory> = new Set();

    constructor() {
        // Utiliser le niveau d√©fini dans le code au lieu de l'environnement
        this.currentLevel = LOG_LEVEL;
        this.updateCategories();
    }

    // M√©thodes publiques pour changer le niveau
    setLevel(level: LogLevel) {
        this.currentLevel = level;
        this.updateCategories();
        this.info(LogCategory.CONNECTION, `üìä Log level changed to: ${LogLevel[level]}`);
    }

    enableDebugMode() {
        this.setLevel(LogLevel.VERBOSE);
    }

    enableMinimalMode() {
        this.setLevel(LogLevel.MINIMAL);
    }

    private updateCategories() {
        switch (this.currentLevel) {
            case LogLevel.MINIMAL:
                // MINIMAL : Grandes √©tapes + erreurs (connexion, d√©connexion, nombre personnes)
                this.enabledCategories = new Set([
                    LogCategory.CONNECTION, // Connexions principales
                    LogCategory.ERROR       // Erreurs
                ]);
                break;
            case LogLevel.NORMAL:
                // NORMAL : On sait ce qui se passe (ICE, SDP, arriv√©es...)
                this.enabledCategories = new Set([
                    LogCategory.CONNECTION,
                    LogCategory.NEGOTIATION,
                    LogCategory.SIGNALING,
                    LogCategory.DATACHANNEL,
                    LogCategory.ERROR
                ]);
                break;
            case LogLevel.VERBOSE:
                // VERBOSE : Debug complet - tout
                this.enabledCategories = new Set(Object.values(LogCategory));
                break;
        }
    }

    // üî¥ MINIMAL : Grandes √©tapes (connexion, d√©connexion, participants)
    minimal(category: LogCategory, message: string, ...args: any[]) {
        if (this.currentLevel >= LogLevel.MINIMAL && this.enabledCategories.has(category)) {
            console.log(`üî¥ [${category}] ${message}`, ...args);
        }
    }

    // üü° NORMAL : Ce qui se passe (ICE, SDP, arriv√©es...)
    info(category: LogCategory, message: string, ...args: any[]) {
        if (this.currentLevel >= LogLevel.NORMAL && this.enabledCategories.has(category)) {
            console.log(`üü° [${category}] ${message}`, ...args);
        }
    }

    // üü¢ SUCCESS : R√©ussites importantes
    success(category: LogCategory, message: string, ...args: any[]) {
        if (this.currentLevel >= LogLevel.NORMAL && this.enabledCategories.has(category)) {
            console.log(`üü¢ [${category}] ${message}`, ...args);
        }
    }

    // üîµ VERBOSE : Debug complet
    debug(category: LogCategory, message: string, ...args: any[]) {
        if (this.currentLevel >= LogLevel.VERBOSE && this.enabledCategories.has(category)) {
            console.log(`üîµ [${category}] ${message}`, ...args);
        }
    }

    // ‚ö†Ô∏è WARNINGS : Toujours en NORMAL+
    warn(category: LogCategory, message: string, ...args: any[]) {
        if (this.currentLevel >= LogLevel.NORMAL && this.enabledCategories.has(category)) {
            console.warn(`‚ö†Ô∏è [${category}] ${message}`, ...args);
        }
    }

    // ‚ùå ERRORS : Toujours affich√©es
    error(category: LogCategory, message: string, ...args: any[]) {
        console.error(`‚ùå [${category}] ${message}`, ...args);
    }

    // Logs sp√©ciaux pour les diagnostics (toujours avec pr√©fixe ü©∫)
    diagnostic(message: string, ...args: any[]) {
        if (this.currentLevel >= LogLevel.VERBOSE) {
            console.log(`ü©∫ ${message}`, ...args);
        }
    }

    private shouldLog(category: LogCategory, requiredLevel: LogLevel): boolean {
        return this.currentLevel >= requiredLevel && this.enabledCategories.has(category);
    }

    // M√©thode pour obtenir l'√©tat actuel
    getStatus() {
        return {
            level: LogLevel[this.currentLevel],
            enabledCategories: Array.from(this.enabledCategories)
        };
    }
}

// Instance globale
export const logger = new WebRTCLogger();

// Export des m√©thodes pour usage facile
export const {
    minimal: logMinimal,
    info: logInfo,
    success: logSuccess,
    debug: logDebug,
    warn: logWarn,
    error: logError,
    diagnostic: logDiagnostic
} = logger;

// Fonction pour activer/d√©sactiver facilement le debug depuis la console
(window as any).webrtcDebug = {
    enable: () => logger.enableDebugMode(),
    disable: () => logger.enableMinimalMode(),
    normal: () => logger.setLevel(LogLevel.NORMAL),
    status: () => logger.getStatus()
};

// Log d'initialisation
logger.info(LogCategory.CONNECTION, `WebRTC Logger initialized - Level: ${LogLevel[logger.getStatus().level as any]}`);
